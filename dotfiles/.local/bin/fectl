#!/usr/bin/env python3

import sys
from argparse import ArgumentParser
from datetime import datetime, timedelta

try:
    import google.auth
    from google.cloud.resourcemanager_v3 import ProjectsClient
    from tabulate import tabulate
except ImportError:
    print(
        "ERROR: You must install tabulate and google-cloud-resource-manager to use this tool."
    )
    print("pip3 install --user google-cloud-resource-manager tabulate")
    sys.exit(1)


def is_feature_env(project):
    has_reaper_labels = (
        project.labels.get("reaper_behaviour", None) is not None
        and project.labels.get("modified_date", None) is not None
    )
    return has_reaper_labels


def delta_to_human_readable_string(delta, show_today=False):
    days = delta.days
    if not days and show_today:
        return "Today"

    return f"{days}d"


def anticipated_reap_date(modified_date):
    reap_date = modified_date + timedelta(days=2)
    while reap_date.weekday() in (5, 6):
        reap_date += timedelta(days=1)

    return reap_date


def get_stage(project):
    stage = project.labels.get("stage", None)
    if stage not in ("prod", "stage", "staging"):
        stage = "dev"
    return stage


def to_row(project):
    created_date = project.labels.get("created_date", None)
    if created_date is None:
        age = "null"
    else:
        parsed_created_date = datetime.strptime(created_date, "%Y-%m-%d")
        age = datetime.now() - parsed_created_date

    modified_date = project.labels.get("modified_date", None)
    if modified_date is None:
        deployed_to = "Never"
    else:
        parsed_modified_date = datetime.strptime(modified_date, "%Y-%m-%d").date()
        deployed_to = datetime.now().date() - parsed_modified_date

    stage = get_stage(project)
    reaper_behavior = project.labels.get("reaper_behaviour", None)
    reap_date = (
        anticipated_reap_date(parsed_modified_date)
        if modified_date is not None and reaper_behavior != "ignore"
        else None
    )
    if reap_date:
        reap_date_str = reap_date.strftime("%Y-%m-%d")
        if (
            reap_date < datetime.now().date()
        ):
            reap_date_str = f"{reap_date_str} (SHOULD HAVE REAPED!)"
    else:
        reap_date_str = "None"

    return [
        project.display_name,
        delta_to_human_readable_string(age),
        delta_to_human_readable_string(deployed_to, show_today=True),
        project.labels.get("reaper_behaviour", None),
        stage,
        reap_date_str,
    ]


def sort_by_name(project):
    return project.display_name


def sort_by_created_date(project):
    created_date = project.labels.get("created_date", None)
    if not created_date:
        return None
    return datetime.strptime(created_date, "%Y-%m-%d")


def sort_by_modified_date(project):
    modified_date = project.labels.get("modified_date", None)
    if not modified_date:
        return None
    return datetime.strptime(modified_date, "%Y-%m-%d")

def sort_by_label(label):
    def __inner(project):
        return project.labels.get(label, None)

    return __inner


def main():
    parser = ArgumentParser()
    parser.add_argument(
        "--google-cloud-org",
        "-o",
        help="Organization ID to scan for feature environments. Should take the form organizations/1234 where 1234 is the ID.",
        default="organizations/1003133169753",
    )
    parser.add_argument(
        "--reaper-behaviour",
        "-r",
        help="If provided only environments with the corresponding reaper behaviour will be displayed.",
        default=None,
    )
    parser.add_argument(
        "--sort",
        "-s",
        help="If provided sort by the given column",
        default="name",
    )
    args = parser.parse_args()

    sort_functions = {
        "name": sort_by_name,
        "age": sort_by_created_date,
        "deployed": sort_by_modified_date,
        "last-deployed": sort_by_modified_date,
        "stage": get_stage,
        "reaper-behaviour": sort_by_label("reaper_behaviour"),
        "reaper-behavior": sort_by_label("reaper_behaviour"),
        "reaper_behaviour": sort_by_label("reaper_behaviour"),
        "reaper_behavior": sort_by_label("reaper_behaviour"),
        "reaper": sort_by_label("reaper_behaviour"),
    }

    try:
        sort_func = sort_functions[args.sort]
    except KeyError:
        print(f"{args.sort} is not a valid sort option, valid options are:")
        for key in sort_functions.keys():
            print(f"\t{key}")
        sys.exit(1)

    credentials, _ = google.auth.default()
    projects_client = ProjectsClient(credentials=credentials)
    projects = sorted(
        [
            project
            for project in projects_client.list_projects(parent=args.google_cloud_org)
            if is_feature_env(project)
        ],
        key=sort_func,
    )

    if args.reaper_behaviour:
        projects = [
            project
            for project in projects
            if project.labels.get("reaper_behaviour") == args.reaper_behaviour.lower()
        ]

    rows = [to_row(project) for project in projects]

    table = tabulate(
        rows,
        headers=[
            "Name",
            "Age",
            "Last Deployed To",
            "Reaper Behaviour",
            "Stage",
            "Anticipated Reap Date",
        ],
    )

    print(table)


if __name__ == "__main__":
    main()
