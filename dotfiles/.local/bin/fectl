#!/usr/bin/env python3

import os
import re
import json
import csv
import sys
import shutil
from argparse import ArgumentParser
from datetime import datetime, timedelta

try:
    import google.auth
    import requests
    from google.cloud.resourcemanager_v3 import ProjectsClient, SearchProjectsRequest
    from tabulate import tabulate
except ImportError:
    print(
        "ERROR: You must install request, tabulate, and google-cloud-resource-manager to use this tool."
    )
    print("pip3 install --user google-cloud-resource-manager tabulate requests")
    sys.exit(1)


JIRA_DOMAIN = os.getenv("JIRA_DOMAIN", "mpbphotographic.atlassian.net")
JIRA_USERNAME = os.getenv("JIRA_USERNAME")
JIRA_TOKEN = os.getenv("JIRA_TOKEN")


def get_ticket_number(project):
    if isinstance(project, str):
        name = project
    else:
        name = project.display_name

    return "-".join(name.split("-")[2:4])


def delta_to_human_readable_string(delta, show_today=False):
    days = delta.days
    if not days and show_today:
        return "Today"

    return f"{days}d"


def anticipated_reap_date(modified_date):
    reap_date = modified_date + timedelta(days=2)
    while reap_date.weekday() in (5, 6):
        reap_date += timedelta(days=1)

    return reap_date


def get_stage(project):
    stage = project.labels.get("stage", None)
    if stage not in ("prod", "stage", "staging"):
        stage = "dev"
    return stage


TICKET_VALIDATOR = re.compile("[A-z]{3,}-[0-9]{1,}")


def get_ticket_info(project):
    ticket_number = get_ticket_number(project)
    if not TICKET_VALIDATOR.match(ticket_number):
        return ["Unknown", "Unknown"]

    response = requests.get(
        f"https://{JIRA_DOMAIN}/rest/api/3/issue/{ticket_number}",
        auth=(JIRA_USERNAME, JIRA_TOKEN),
    )
    if response.status_code == 404:
        return ["Unknown", "Unknown"]

    response.raise_for_status()

    data = response.json()
    fields = data.get("fields", {})
    return [
        fields.get("status", {}).get("name"),
        fields.get("summary"),
    ]


def to_row(project, include_ticket_info=False):
    created_date = project.labels.get("created_date", None)
    if created_date is None:
        age = "null"
    else:
        parsed_created_date = datetime.strptime(created_date, "%Y-%m-%d")
        age = datetime.now() - parsed_created_date

    modified_date = project.labels.get("modified_date", None)
    if modified_date is None:
        deployed_to = "Never"
    else:
        parsed_modified_date = datetime.strptime(modified_date, "%Y-%m-%d").date()
        deployed_to = datetime.now().date() - parsed_modified_date

    stage = get_stage(project)
    reaper_behavior = project.labels.get("reaper_behaviour", None)
    reap_date = (
        anticipated_reap_date(parsed_modified_date)
        if modified_date is not None and reaper_behavior != "ignore"
        else None
    )
    if reap_date:
        reap_date_str = reap_date.strftime("%Y-%m-%d")
        if reap_date < datetime.now().date():
            reap_date_str = f"{reap_date_str} (SHOULD HAVE REAPED!)"
    else:
        reap_date_str = "None"

    row = [
        project.display_name,
        delta_to_human_readable_string(age),
        delta_to_human_readable_string(deployed_to, show_today=True),
        project.labels.get("reaper_behaviour", None),
        stage,
        reap_date_str,
    ]
    if include_ticket_info:
        row.extend(get_ticket_info(project))

    return row


def sort_by_name(project):
    return project.display_name


def sort_by_created_date(project):
    created_date = project.labels.get("created_date", None)
    if not created_date:
        return None
    return datetime.strptime(created_date, "%Y-%m-%d")


def sort_by_modified_date(project):
    modified_date = project.labels.get("modified_date", None)
    if not modified_date:
        return None
    return datetime.strptime(modified_date, "%Y-%m-%d")


def main():
    parser = ArgumentParser()
    parser.add_argument(
        "--google-cloud-org",
        help="Organization ID to scan for feature environments. Should take the form organizations/1234 where 1234 is the ID.",
        default="organizations/1003133169753",
    )
    parser.add_argument(
        "--filter-on",
        "-f",
        help="If provided filter this column where value matches --filter-value.",
        default=None,
    )
    parser.add_argument(
        "--filter-value",
        "-v",
        help="If provided filter the --filter-on column where value matches this value.",
        default=None,
    )
    parser.add_argument(
        "--sort",
        "-s",
        help="If provided sort by the given column",
        default="name",
    )
    parser.add_argument(
        "--include-ticket-info",
        "-i",
        action="store_true",
        help="If provided JIRA ticket info will be fetched and added to the table",
    )
    parser.add_argument(
        "--output",
        "-o",
        default="ascii",
        help="Select the output format for the data from: ascii, json, or csv",
    )
    args = parser.parse_args()

    if (args.filter_on is None and args.filter_value is not None) or (
        args.filter_on is not None and args.filter_value is None
    ):
        print(
            "If --filter-on is provided --filter-value must always be provided and vice versa."
        )
        sys.exit(1)

    credentials, _ = google.auth.default()
    projects_client = ProjectsClient(credentials=credentials)

    headers = [
        "Name",
        "Age",
        "Deployed",
        "Reaper",
        "Stage",
        "Expected Reap Date",
    ]
    if args.include_ticket_info:
        headers.extend(["JIRA Status", "JIRA Summary"])

    sort_functions = {
        k.lower().replace(" ", "-"): lambda row: row[i] for i, k in enumerate(headers)
    }
    try:
        sort_func = sort_functions[args.sort]
    except KeyError:
        print(f"{args.sort} is not a valid sort option, valid options are:")
        for key in sort_functions.keys():
            print(f"\t{key}")
        sys.exit(1)

    sort_functions = {
        k.lower().replace(" ", "-"): lambda row: row[i] for i, k in enumerate(headers)
    }
    try:
        sort_func = sort_functions[args.sort]
    except KeyError:
        print(f"{args.sort} is not a valid sort option, valid options are:")
        for key in sort_functions.keys():
            print(f"\t{key}")
        sys.exit(1)

    rows = sorted(
        [
            to_row(project, include_ticket_info=args.include_ticket_info)
            for project in projects_client.search_projects(
                query=f"displayName:mpb-platform-* labels:reaper_behaviour lifecycleState:ACTIVE",
            )
        ],
        key=sort_func,
    )

    if args.filter_on and args.filter_value:
        idx = [h.lower() for h in headers].index(args.filter_on)
        rows = filter(lambda row: row[idx] == args.filter_value, rows)

    if args.output == "csv":
        c_writer = csv.writer(sys.stdout)
        c_writer.writerow(headers)
        c_writer.writerows(rows)
    elif args.output == "json":
        data = [{headers[i]: row[i] for i in range(len(row))} for row in rows]

        json.dump(data, sys.stdout, indent=4)
    else:
        width, _ = shutil.get_terminal_size((80, 20))
        if width < 200:
            maxcolwidths = max([len(row[0]) for row in rows])
        else:
            maxcolwidths = 100

        table = tabulate(
            rows,
            headers=headers,
            maxcolwidths=maxcolwidths,
        )

        print(table)


if __name__ == "__main__":
    main()
