#!/usr/bin/env python3
# vi: ft=python
"""
Create, edit, search, and list notes.
"""

import argparse
import os
import re
import subprocess
import sys
import tempfile

RECIPIENTS = os.getenv(
    "NOTE_RECIPIENTS",
    "",
)
NOTE_DIR = os.getenv(
    "NOTE_DIR",
    os.path.expanduser("~/Notes"),
)
DEFAULT_SUFFIX = os.getenv(
    "NOTE_DEFAULT_SUFFIX",
    ".md",
)


def notes(search_dir=NOTE_DIR):
    for root, dirs, files in os.walk(NOTE_DIR):
        dirs[:] = [d for d in dirs if not d.startswith(".")]
        for file in files:
            yield os.path.join(root, file)


def find_file(filename, search_dir=NOTE_DIR):
    """Find filename in search_dir."""
    term = re.compile(r".*{}.*".format(filename), re.IGNORECASE)
    for note in notes(search_dir=search_dir):
        if term.match(note):
            return note

    return None


def search_file(filename, term):
    """Search filename for term."""
    # TODO: smarter and bigger context
    # TODO: highlight search term match in matched line
    with open(filename, "r", encoding="utf-8") as fh:
        lineno = 0
        previous = None
        matched = None

        try:
            for line in fh:
                lineno += 1
                if matched is not None:
                    print("{}:".format(filename))
                    if previous is not None:
                        print("\tL{}| {}".format(previous[0], previous[1]))
                    print("\tL{}| {}".format(matched[0], matched[1]))
                    print("\tL{}| {}".format(lineno, line.rstrip()))
                    return
                elif term.match(line):
                    matched = (lineno, line.rstrip())
                else:
                    previous = (lineno, line.rstrip())
        except UnicodeDecodeError:
            pass


def encrypt(filename, target_file):
    """
    Encrypt file at filename to target_file, remove filename
    """
    args = ["gpg", "--yes", "--output", target_file, "--encrypt", filename]
    recipients = RECIPIENTS.split(",")
    for recipient in recipients:
        args.extend(["-r", recipient])
    subprocess.run(args)
    os.remove(filename)
    return None


def decrypt(filename, silent=False):
    """
    Decrypt filename and return a temporary file which contains the contents.
    """
    _, real_suffix = os.path.splitext(filename[: -len(".gpg")])
    _, tmpfile = tempfile.mkstemp(suffix=real_suffix if real_suffix else None)
    args = {
        "args": [
            "gpg",
            "--yes",
            "--output",
            tmpfile,
            "--decrypt",
            filename,
        ],
    }
    if silent:
        args["stdout"] = subprocess.DEVNULL
        args["stderr"] = subprocess.DEVNULL
        args["stdin"] = subprocess.DEVNULL

    subprocess.run(**args)
    return tmpfile


def is_encrypted_file(filename):
    """Return whether or not filename represents an encrypted file."""
    return filename.endswith(".gpg") or filename.endswith(".pgp")


def editor(filename):
    """Run $EDITOR on filename."""
    subprocess.run(
        args=[os.getenv("EDITOR", "vi"), filename],
        check=True,
        stdout=sys.stdout,
        stdin=sys.stdin,
    )


def list_notes():
    """
    List all notes.
    """
    for note in notes():
        print(note)


def search(search_term: str):
    """
    Search notes.
    """
    term = re.compile(r".*{}.*".format(search_term), re.IGNORECASE)

    for note in notes():
        if is_encrypted_file(note):
            search_filename = decrypt(note, silent=True)
        else:
            search_filename = note

        search_file(search_filename, term)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--no-editor",
        "-n",
        action="store_true",
        help="Change the behavior of some commands to not invoke $EDITOR",
    )
    parser.add_argument(
        "--search",
        "-s",
        type=str,
        help="If given search notes for the given text.",
    )
    parser.add_argument(
        "--list",
        "-l",
        action="store_true",
        help="If given list all notes",
    )
    parser.add_argument(
        "--encrypt",
        "-e",
        action="store_true",
        help="Encrypt the note if it will be created",
    )
    parser.add_argument(
        "NAME",
        nargs="*",
        help="Name of the note to edit or create.",
    )
    args = parser.parse_args()

    if args.list:
        list_notes()
        return

    if args.search:
        search(args.search)
        return

    if not args.NAME:
        print('ERROR: Must provide a name if not using search or list flags.')
        sys.exit(1)

    name = " ".join(args.NAME)
    path = find_file(name)
    if path is None:
        new_path = os.path.join(NOTE_DIR, name)
        _, suffix = os.path.splitext(new_path)
        if not suffix:
            new_path += DEFAULT_SUFFIX

        os.makedirs(os.path.dirname(new_path), exist_ok=True)
        with open(new_path, "w") as note:
            note.write("")

        path = new_path
        if args.encrypt:
            path += ".gpg"
            encrypt(new_path, path)

    if args.no_editor:
        print(path)
    else:
        encrypted = is_encrypted_file(path)
        if encrypted:
            fp = decrypt(path)
        else:
            fp = path

        editor(fp)
        if encrypted:
            encrypt(fp, path)


if __name__ == "__main__":
    main()
