#+title: Doom Emacs Config

* A bit about me.
 Some functionality uses this to identify you, e.g. GPG configuration, email
 clients, file templates and snippets. It is optional.

 #+BEGIN_SRC emacs-lisp
(setq user-full-name "Mathew Robinson"
      user-mail-address "chasinglogic@gmail.com")
 #+END_SRC

* Doom Settings
Doom exposes five (optional) variables for controlling fonts in Doom:

- `doom-font' -- the primary font to use
- `doom-variable-pitch-font' -- a non-monospace font (where applicable)
- `doom-big-font' -- used for `doom-big-font-mode'; use this for
  presentations or streaming.
- `doom-symbol-font' -- for symbols
- `doom-serif-font' -- for the `fixed-pitch-serif' face

If you or Emacs can't find your font, use 'M-x describe-font' to look them
up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
refresh your font settings. If Emacs still can't find your font, it likely
wasn't installed correctly. Font issues are rarely Doom issues!

There are two ways to load a theme. Both assume the theme is installed and
available. You can either set `doom-theme' or manually load a theme with the
`load-theme' function. This is the default:

#+begin_src emacs-lisp
(setq doom-theme 'doom-dracula
      doom-font (font-spec
                 :family (if (eq system-type 'darwin) "Menlo" "DejaVu Sans Mono")
                 :size 15))
#+end_src

Doom by default "highlights" the line with the cursor on it. This I find is slow
and annoying so disable it here:

#+BEGIN_SRC emacs-lisp
(setq global-hl-line-modes nil)
#+END_SRC

This determines the style of line numbers in effect. If set to `nil', line
numbers are disabled. For relative line numbers, set this to `relative'.

#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type t)
#+END_SRC

Make fd escape insert mode as I always have.

#+BEGIN_SRC emacs-lisp
(after! evil-escape
  (setq evil-escape-key-sequence "fd"))
#+END_SRC

* Projectile Settings
I prefer to see dired when I switch to a project. Set
=+workspaces-switch-project-function= here instead of
=projectile-switch-project-action= because I use the Doom workspaces module.

#+BEGIN_SRC emacs-lisp
(setq +workspaces-switch-project-function #'dired)
#+END_SRC

* TODO Org Settings
If you use `org' and don't want your org files in the default location below,
change `org-directory'. It must be set before org loads!

#+BEGIN_SRC emacs-lisp
(setq org-directory "~/Org/")

(setq org-default-todo-file  (expand-file-name "inbox.org"  org-directory)
      org-default-notes-file (expand-file-name "notes.org.gpg" org-directory)
      org-default-ideas-file (expand-file-name "inbox.org" org-directory))

(setq-default org-refile-targets '((nil :maxlevel . 1)
                                   (org-agenda-files :maxlevel . 2))
              org-refile-use-outline-path 'file
              org-outline-path-complete-in-steps nil
              org-refile-allow-creating-parent-nodes 'confirm)

#+END_SRC

* My Custom Commands
** Find Org Files
I keep all of my org files in `org-directory' and some of them are
encrypted. This macro lets me easily define functions for quickly
finding them. It's a macro because [[https://www.jamesporter.me/2013/06/14/emacs-lisp-closures-exposed.html][Emacs has crazy scoping rules]]
that make returning lambdas from functions difficult.

#+BEGIN_SRC emacs-lisp
(defmacro chasinglogic-find-org-file (name)
  "Create a function to find the org file NAME."
  `(defun ,(intern (format "chasinglogic-find-org-file-%s" name)) ()
     (interactive)
     (let ((file-name (expand-file-name ,(format "%s.org" name) org-directory)))
       (find-file (if (file-exists-p (concat file-name ".gpg"))
                      (concat file-name ".gpg")
                    file-name)))))
(chasinglogic-find-org-file notes)
(chasinglogic-find-org-file ideas)
(chasinglogic-find-org-file todo)


;; (map! :leader
;;       (:prefix ("u" . "My Utilities")
;;                "i" #'chasinglogic-find-org-file-ideas
;;                "n" #'chasinglogic-find-org-file-notes
;;                "t" #'chasinglogic-find-org-file-todo))
#+END_SRC

** GDB/LLDB Debugging
I maintain a developer toolchain that means I have to frequently
interact with GDB *and* LLDB. Since LLDB does not have Emacs
integration this function allow me to easily get breakpoints for
wherever I am.

It checks for the `projectile-project-root' and if found will make
the filename relative to this directory. Otherwise the full path
of the `buffer-file-name' will be used. It grabs the line number
the point is currently at then simply concatenates the generated
filename, a colon, and the line number. When called interactively
it will add it to the kill ring effectively "copying" the
breakpoint for easy pasting.

#+BEGIN_SRC emacs-lisp
(defun chasinglogic-copy-breakpoint-for-here (&optional copy)
  "Return a filename:linenumber pair for point for use with LLDB/GDB.

If COPY is provided copy the value to kill ring instead of returning."
  (interactive (list t))
  (let* ((line-number (format "%d" (line-number-at-pos)))
         (file-name (if (projectile-project-root)
                        (file-relative-name (buffer-file-name) (projectile-project-root))
                      (file-name-nondirectory (buffer-file-name))))
         (breakpoint (concat file-name ":" line-number)))
    (if copy
        (progn
          (kill-new breakpoint)
          (message "%s" breakpoint))
      breakpoint)))
#+END_SRC

** Projector integration with projectile

I maintain (what I think) is a pretty cool tool called [[https://github.com/chasinglogic/projector][Projector]]
and this "integrates" it with projects. Simply put it seeds
Projectile's known project list with the list of projects that
Projector knows about. It's really nice when on a new machine that
has all my repositories but since I haven't visited them I can't
quickly switch to them.

#+BEGIN_SRC emacs-lisp
(defun chasinglogic-add-projector-projects-to-projectile ()
  "Add projector projects to projects."
  (interactive)
  (setq
    projectile-known-projects
    (mapcar
     #'list
     (sort
    (delete ""
            (split-string
              (shell-command-to-string "projector list") "\n"))
    #'(lambda (a b) (< (length a) (length b)))))))
#+END_SRC

* Additional Packages
* Keybindings
Most of the Doom keybinds are great but some muscle memory refuses to die.

#+BEGIN_SRC emacs-lisp
(map! :leader
      "SPC" #'execute-extended-command
      "w m" #'doom/window-maximize-buffer
      "g s" #'magit-status)

(map! :n "-" #'(lambda () (interactive) (dired ".")))
#+END_SRC
* Dead Code

A place for me to put dead code until I decide what to do with it. It's dead
because it doesn't work or has no strict purpose yet.

#+BEGIN_SRC emacs-lisp
;; (use-package multi-line
;;   :config (setq-default multi-line-current-strategy
;;                         (multi-line-strategy
;;                          :respace (multi-line-default-respacers
;;                                    (make-instance multi-line-always-newline))))
;;   :bind ("C-;" . multi-line))
#+END_SRC

** Automatically maximize Emacs frames when they are created
This is a custom function I wrote that maximizes the frame it's
passed. I then hook it into the `after-make-frame-functions' hook
so any time a frame is created it is maximized.

#+BEGIN_SRC emacs-lisp
(defun maximize-gui-frames (frame)
  "Maxmize a the GUI frame FRAME."
  (with-selected-frame frame
    (set-frame-parameter nil 'fullscreen 'maximized)))
(add-hook 'after-make-frame-functions 'maximize-gui-frames)

;; Post initialization
;;
;; These are the few final steps we should take when bringing up
;; Emacs.
;;
;; First Maximize this frame, the initial frame won't see our hooks in
;; `make-frame-init-functions'.
(toggle-frame-maximized)
(put 'narrow-to-region 'disabled nil)
#+END_SRC
